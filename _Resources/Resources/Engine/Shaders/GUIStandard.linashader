/*
This file is a part of: Lina Engine
https://github.com/inanevin/LinaEngine

Author: Inan Evin
http://www.inanevin.com

Copyright (c) [2018-] [Inan Evin]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#LINA_PIPELINE_GUI

#LINA_VS

#version 460

layout (location = 0) in vec2 pos;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec4 col;

layout (location = 0) out vec4 fCol;
layout (location = 1) out vec2 fUV;

layout(set = 2, binding = 0) uniform MaterialData
{
   mat4 projection;
   vec4 color1;
   vec4 color2;
   vec2 vec2pack1;
   int intvar1;
   int intvar2;
   int intvar3;
} material;

void main()
{
   fCol = col;
   fUV = uv;
   gl_Position = material.projection * vec4(pos.x, pos.y, 0.0f, 1.0);
}

#LINA_END

#LINA_FS

#version 460

layout (location = 0) in vec4 fCol;
layout (location = 1) in vec2 fUV;

layout (location = 0) out vec4 fragColor;

layout(set = 2, binding = 0) uniform MaterialData
{
   mat4 projection;
   vec4 color1;
   vec4 color2;
   vec2 vec2pack1;
   vec2 vec2pack2;
   float floatvar1;
   float floatvar2;
   float floatvar3;
   int intvar1;
   int intvar2;
   int intvar3;
} material;

layout(set = 2, binding = 1) uniform sampler2D diffuse;

void main()
{
   vec4 finalColor = fCol;

   // Gradient
   if(material.intvar1 == 1)
   {
      if(material.intvar2 == 0)
      {
         vec4 col = mix(material.color1, material.color2, fUV.x);
         finalColor = vec4(col.rgb, material.intvar3 == 1 ? fCol.a : col.a);
      }
      else if(material.intvar2 == 1)
      {
         vec4 col = mix(material.color1, material.color2, fUV.y);
         finalColor = vec4(col.rgb, material.intvar3 == 1 ? fCol.a : col.a);
      }
      else if(material.intvar2 == 2)
      {
         vec2 uv = fUV - vec2(0.5, 0.5);
         float dist = length(uv * material.floatvar1);
         vec4 col = mix(material.color1, material.color2, dist);
         finalColor = vec4(col.rgb, material.intvar3 == 1 ? fCol.a : col.a);
      }
      else if(material.intvar2 == 3)
      {
         float dist = length(fUV * material.floatvar1);
         vec4 col = mix(material.color1, material.color2, dist);
         finalColor = vec4(col.rgb, material.intvar3 == 1 ? fCol.a : col.a); 
      }
   }
   else if(material.intvar1 == 2)
   {
      // Textured
      vec4 col = texture(diffuse, fUV * material.vec2pack1 + material.vec2pack2);
      finalColor = vec4(col.rgb, material.intvar3 == 1 ? fCol.a : col.a) * material.color1; 
   }
   else if(material.intvar1 == 3)
   {
      // Simple Text
      float a = texture(diffuse, fUV).r;
      finalColor = vec4(fCol.rgb, a * fCol.a);
   }
   else if(material.intvar1 == 4)
   {
      // SDF text
      float d = texture(diffuse, fUV).r;
      float alpha = smoothstep(material.floatvar1 - material.floatvar2, material.floatvar1 + material.floatvar2, d);
      vec3 baseColor = fCol.rgb;
      if(material.intvar2 == 1)
      {
         float border = smoothstep(material.floatvar1 + material.floatvar3 - material.floatvar2, material.floatvar1 + material.floatvar3 + material.floatvar2, d);
         baseColor = mix(material.color1, fCol, border).rgb;
      }
      finalColor = vec4(baseColor, material.intvar3 == 1 ? 1.0f - alpha : alpha);
   }

   fragColor = finalColor;
}

#LINA_END